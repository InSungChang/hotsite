Front e Back-end

Para preparar ambiente de desenvolvimento.

a. Instalar Node.js
Certifique-se de ter o Node.js instalado em sua máquina. Você pode baixar o instalador adequado para seu sistema operacional a partir do site oficial do Node.js.

b. Instalar MySQL
Se ainda não tiver, instale o MySQL. Dependendo do seu sistema operacional, você pode encontrar instruções de instalação no site oficial do MySQL.

2. Criar e Configurar o Banco de Dados
Após instalar o MySQL, você pode usar uma ferramenta como o MySQL Workbench ou o terminal para criar o banco de dados e as tabelas necessárias.

Comandos SQL: ==> no mysql workbench
CREATE DATABASE seu_banco_de_dados;
USE seu_banco_de_dados;

CREATE TABLE form_submissions (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(100) NOT NULL,
  service VARCHAR(50) NOT NULL,
  description TEXT NOT NULL
);

3. Configurar o Projeto Node.js ==> abrir terminal bash
a. Criar a Estrutura do Projeto
Dentro de uma nova pasta de projeto, inicialize um novo projeto Node.js:

mkdir form-example
cd form-example
npm init -y

b. Instalar Dependências
Instale as dependências necessárias:

npm install express body-parser mysql express-validator csurf helmet express-rate-limit

c. Criar o Arquivo server.js
Crie um arquivo server.js com o seguinte conteúdo: javascript
const express = require('express');
const bodyParser = require('body-parser');
const mysql = require('mysql');
const { body, validationResult } = require('express-validator');
const csrf = require('csurf');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const cookieParser = require('cookie-parser');

const app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(cookieParser());
app.use(helmet());

const db = mysql.createConnection({
  host: 'localhost',
  user: 'seu_usuario',
  password: 'sua_senha',
  database: 'seu_banco_de_dados'
});

db.connect(err => {
  if (err) throw err;
  console.log('Conectado ao banco de dados.');
});

const csrfProtection = csrf({ cookie: true });

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100
});

app.use(limiter);

app.get('/form', csrfProtection, (req, res) => {
  res.send(`
    <form id="contact-form" action="/submit-form" method="POST">
      <input type="hidden" name="_csrf" value="${req.csrfToken()}">
      <label for="name">Nome:</label>
      <input type="text" id="name" name="name" required>
      
      <label for="email">Email:</label>
      <input type="email" id="email" name="email" required>
      
      <label for="service">Serviço Desejado:</label>
      <select id="service" name="service">
        <option value="webdesign">Web Design</option>
        <option value="seo">SEO</option>
        <option value="marketing">Marketing Digital</option>
      </select>
      
      <label for="description">Descreva o que precisa:</label>
      <textarea id="description" name="description" required></textarea>
      
      <button type="submit">Enviar</button>
    </form>
  `);
});

app.post('/submit-form', csrfProtection, [
  body('name').trim().isLength({ min: 1 }).escape(),
  body('email').isEmail().normalizeEmail(),
  body('service').trim().isIn(['webdesign', 'seo', 'marketing']).escape(),
  body('description').trim().isLength({ min: 1 }).escape()
], (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  const { name, email, service, description } = req.body;
  const sql = 'INSERT INTO form_submissions (name, email, service, description) VALUES (?, ?, ?, ?)';
  
  db.query(sql, [name, email, service, description], (err, result) => {
    if (err) throw err;
    res.json({ message: 'Dados armazenados com sucesso.' });
  });
});

app.listen(3000, () => {
  console.log('Servidor rodando na porta 3000');
});

4. Testar Localmente
a. Iniciar o Servidor
No terminal, na pasta do seu projeto, execute o comando: ==> abrir terminal bash

node server.js

b. Abrir o Formulário no Navegador
Abra o navegador e vá para http://localhost:3000/form. Preencha o formulário e clique em "Enviar". Os dados devem ser enviados ao servidor Node.js e armazenados no banco de dados MySQL.


Caso apareça erro de autenticação:
==================================

O erro ER_NOT_SUPPORTED_AUTH_MODE indica que a versão do MySQL que você está usando está configurada para usar um modo de autenticação que não é compatível com o cliente MySQL que você está usando no Node.js. Para resolver isso, você pode alterar o método de autenticação do seu usuário MySQL para um modo compatível.

Passos para Resolver o Problema:

Acessar o MySQL no Terminal:

Abra o terminal e acesse o MySQL com um usuário administrador (como root):

mysql -u root -p

Alterar o Método de Autenticação:

Depois de acessar o MySQL, altere o método de autenticação para o usuário que você está usando no seu projeto. O seguinte comando alterará o método de autenticação para mysql_native_password, que é compatível com o cliente MySQL que você está usando no Node.js:

No terminal mysql:
ALTER USER 'seu_usuario'@'localhost' IDENTIFIED WITH mysql_native_password BY 'sua_senha';
FLUSH PRIVILEGES;
Substitua 'seu_usuario' pelo nome de usuário que você está usando no seu projeto Node.js e 'sua_senha' pela senha desse usuário.

Verificar as Alterações:

Certifique-se de que o método de autenticação foi alterado com sucesso. Você pode fazer isso listando os usuários e verificando a coluna plugin:

No terminal mysql
SELECT user, host, plugin FROM mysql.user;

Você deve ver que o plugin para o seu usuário é mysql_native_password.

Reiniciar o Servidor Node.js:

Depois de fazer essas alterações, saia do MySQL e reinicie o servidor Node.js:
No terminal:
node server.js

Exemplo Completo:
Aqui está um exemplo do que você verá no terminal:

$ mysql -u root -p
Enter password: ********

mysql> ALTER USER 'seu_usuario'@'localhost' IDENTIFIED WITH mysql_native_password BY 'sua_senha';
Query OK, 0 rows affected (0.01 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.01 sec)

mysql> SELECT user, host, plugin FROM mysql.user;
+-------------+-----------+-----------------------+
| user        | host      | plugin                |
+-------------+-----------+-----------------------+
| root        | localhost | mysql_native_password |
| seu_usuario | localhost | mysql_native_password |
+-------------+-----------+-----------------------+
2 rows in set (0.00 sec)

mysql> exit

Dados do banco de dados:

const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'Metro@21061975',
  database: 'contatodb'
});

INSERT INTO contato_web (name, email, service, description) VALUES (?, ?, ?, ?)
